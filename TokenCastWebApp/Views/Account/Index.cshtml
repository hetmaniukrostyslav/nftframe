@{
    ViewData["Title"] = "Account";
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

     <title>Snitch NFT Studio</title>

   
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js"></script>
    <script src="https://unpkg.com/vue-qrcode-reader/dist/VueQrcodeReader.umd.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/ethereum/web3.js@1.0.0-beta.34/dist/web3.min.js"></script>
    <script charset="utf-8"
            src="https://cdn.ethers.io/scripts/ethers-v4.min.js"
            type="text/javascript">
  </script>

    <script type="text/javascript" src="https://unpkg.com/web3@1.2.11/dist/web3.min.js"></script>
    <script type="text/javascript" src="https://unpkg.com/web3modal@1.9.0/dist/index.js"></script>
    <script type="text/javascript" src="https://unpkg.com/evm-chains@0.2.0/dist/umd/index.min.js"></script>
    <script type="text/javascript" src="https://unpkg.com/@@walletconnect/web3-provider@1.2.1/dist/umd/index.min.js"></script>
    <script type="text/javascript" src="https://unpkg.com/fortmatic@2.0.6/dist/fortmatic.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/authereum@latest/authereum.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bitski@0.10.8/dist/bitski.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

    <script src="https://unpkg.com/vue-advanced-cropper@1/dist/index.umd.js"></script>
    <link
        rel="stylesheet"
        href="https://unpkg.com/vue-advanced-cropper@1/dist/style.css"/>

    <script src="/js/vibrant.min.js"></script>
    <script src="/js/whiteLabelers.js"></script>
    <script type="text/javascript" src="/js/random-words.js"></script>
    <script type="text/javascript" src="/js/walletbeacon.min.js"></script>
    <script src="/js/main.js"></script>
    <script src="/js/gif.js"></script>


    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400;500;700;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/old.css">
    <link rel="stylesheet" href="/css/modals.css">
    <link rel="stylesheet" href="/css/Hamburger.css">
    <link rel="stylesheet" href="/css/Sidebar.css">
    <link rel="stylesheet" href="/css/MenuFont.css">
</head>

<body style="background-color: black">
<div id="app">

<nav class="container-fluid">
    <span id="header" class="navbar-title">
        <a>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 301.57 46.58" id="svg-header-logo"><g id="Слой_2" data-name="Слой 2"><g id="Camada_1" data-name="Camada 1"><path d="M50.28.05q-16.48,0-33,0H16.1v0a20.25,20.25,0,0,0-5.59.9C3.1,3.36.82,8.46.21,12.31c-.8,5.1.67,9.44,4.25,12.55a15.89,15.89,0,0,0,10.26,3.92c4.45.09,9,.08,13.32.07,2.6,0,5.22,0,7.82,0a21.74,21.74,0,0,1,3.8.32,3.17,3.17,0,0,1,2.11,1.19,2.62,2.62,0,0,1-.72,3.57A6.76,6.76,0,0,1,36.77,35H0V46.5H35.86a23.87,23.87,0,0,0,5.55-.42,16.68,16.68,0,0,0,8.22-4,13.88,13.88,0,0,0,4.24-11.77,12.9,12.9,0,0,0-6.45-10.36,17.57,17.57,0,0,0-9.07-2.52c-4.93-.05-9.93,0-14.77,0H18.51a13.91,13.91,0,0,1-5.13-.59A2.42,2.42,0,0,1,11.78,15a2.26,2.26,0,0,1,.83-2.14A6.41,6.41,0,0,1,17.1,11.5H50.38a3.16,3.16,0,0,0,.63-.05h2.92V.06H50.28Z" /><rect x="114.94" width="11.34" height="46.5" /><path d="M149.15,8.92V.05H129.62V11.49h19a11.6,11.6,0,0,0-.16,1.57V46.41h11.4V11.49h21V.05h-19.4A13,13,0,0,0,149.15,8.92Z" /><path d="M204.42.06a26.62,26.62,0,0,0-9.73,1.77,20.94,20.94,0,0,0-11.25,10A25.26,25.26,0,0,0,181.27,28c1.84,10.91,10.25,18,22,18.44,1.85.07,3.71.09,5.55.09l27.24,0V35c-2.68,0-29.53,0-32.21,0a12.9,12.9,0,0,1-3.63-.52,10,10,0,0,1-7.63-8.18,20.53,20.53,0,0,1-.25-4.19,10.16,10.16,0,0,1,1.39-5c2.1-3.61,5.33-5.41,9.88-5.5,2.75,0,29.68-.06,32.45-.07V.06h-31.6Z" /><path d="M100.91.05c0,2.31,0,32.64,0,35-1,0-2,0-3,0a2.16,2.16,0,0,1-2-1.3c-1.8-3.41-3.57-6.84-5.34-10.27-1.14-2.2-2.27-4.4-3.41-6.59-.47-.89-.92-1.79-1.37-2.68-1.21-2.41-2.47-4.89-3.93-7.27A14.13,14.13,0,0,0,70.27.1C67.91,0,65.55,0,63.27,0l-2,0V0H56.55V5.9c0,9.13,0,36.58,0,40.68H67.91V15.07c0-1.19,0-2.38,0-3.59,1,0,2,0,2.88.07A2.42,2.42,0,0,1,73,13c.92,1.73,1.81,3.46,2.7,5.2l1.24,2.4,2.76,5.35c2.16,4.22,4.4,8.59,6.7,12.85a14.36,14.36,0,0,0,11.81,7.69c1.37.11,2.73.14,4.08.14,1.07,0,2.13,0,3.17,0s2,0,3.06,0h3.8V42.91c0-4.95,0-37.91,0-42.86Z" /><path d="M294.27,23.37V.06H282.9c0,1,0,16.36,0,17.3H260.57c-7.44,0-10.07,7.45-10.07,7.45V17.37h0c0-1,0-16.34,0-17.31H239.14c0,6.72,0,35.57,0,46.51H250.5c0-.93,0-16.83,0-17.76q16.22,0,32.43,0c0,.92,0,16.82,0,17.75h11.36V23.37Z" /><path d="M298.56.05a3,3,0,1,0,3,3A3,3,0,0,0,298.56.05Zm0,5.49A2.48,2.48,0,1,1,301,3.06,2.49,2.49,0,0,1,298.56,5.54Z" /><path d="M299.75,3.09a1,1,0,0,0,.17-.57,1,1,0,0,0-.34-.75,1.27,1.27,0,0,0-.87-.29h-1.29v3h.64V3.57h.53l.75.94h.77l-.83-1A1,1,0,0,0,299.75,3.09Zm-.64-.24a.7.7,0,0,1-.42.13h-.63V2.07h.63a.7.7,0,0,1,.42.12.42.42,0,0,1,.17.33A.4.4,0,0,1,299.11,2.85Z" /></g></g></svg>
        </a>
    </span>

    <div id="burger"
         :class="{ 'active' : showHamburger }"
         v-on:click="ToggleBurger"
         v-if="walletConnected">
        <slot>
            <button type="button" class="burger-button" title="Menu">
                <span class="burger-bar burger-bar--1"></span>
                <span class="burger-bar burger-bar--2"></span>
                <span class="burger-bar burger-bar--3"></span>
            </button>
        </slot>
    </div>
</nav>

<div class="sidebar">
    <div class="sidebar-backdrop" style=" z-index: 1;" v-on:click="ToggleBurger" v-if="showHamburger"></div>
    <transition name="slide">
        <div v-if="showHamburger" class="sidebar-panel">
            <slot>
                <ul class="sidebar-panel-nav">
                    <li style="margin: 5em 0 0;" class="sidebar-menu-title">
                        <span id="idBar">
                            {{ shortenedAddress }}
                        </span>
                        <hr style="border-bottom: solid thin #707070; z-index:1000; margin: 0;"/>
                    </li>
                    <li v-if="showAddDeviceButton" style="margin: 1em 0 0;">
                        <span class="sidebar-menu-title" v-on:click="showAddDeviceInput = true"
                              style="cursor:pointer; margin-top:1em;">
                            Add new Device
                            <svg style="float:right; margin-top:0.1em; margin-left:40px" width="25" height="25"
                                 viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M12.4482 21.2744C17.4188 21.2744 21.4482 17.245 21.4482 12.2744C21.4482 7.30383 17.4188 3.27439 12.4482 3.27439C7.47768 3.27439 3.44824 7.30383 3.44824 12.2744C3.44824 17.245 7.47768 21.2744 12.4482 21.2744Z"
                                      stroke="black" stroke-width="1.52987" stroke-miterlimit="10"/>
                                <path d="M8.69824 12.2741H16.1982" stroke="black" stroke-width="1.52987"
                                      stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M12.4482 8.52409V16.0241" stroke="black" stroke-width="1.52987"
                                      stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </span>
                        <hr style="border-bottom: solid thin #707070; z-index:1000; margin: 0;"/>
                    </li>
                    <li v-if="showAddDeviceButton" style="margin: 1em 0 0;">
                        <span class="sidebar-menu-title" id="viewDevicesButton"
                              v-on:click="viewDevices = !viewDevices" style="cursor:pointer">
                            Linked Devices
                        </span>
                        <hr style="border-bottom: solid thin #707070; z-index:1000; margin: 0;"/>
                        <transition name="slide-down">
                            <div>
                                <table>
                                    <tr v-for="device in account.devices">
                                        <td class="deviceListElement sidebar-menu-title-device" style="cursor:pointer"
                                            v-on:click="DeviceSelected(device)">
                                            {{ GetDeviceAlias(device) }}
                                            <span v-if="deviceStatuses.indexOf(device) !== -1" style="color: #0FFF50">Online</span>
                                            <span v-else style="color: #FF5733">Offline</span>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </transition>
                    </li>
                    <li style="padding-top:6em">
                        <span class="sidebar-menu-title"
                              style="cursor:pointer;font-weight: 400;font-size: 30px;line-height: 105%;letter-spacing: -0.02em;color: #000000;"
                              v-on:click="SignOut">
                            <svg style="padding-top:5px" width="25" height="25" viewBox="0 0 25 25" fill="none"
                                 xmlns="http://www.w3.org/2000/svg">
                                <g clip-path="url(#clip0_134_516)">
                                    <path d="M12.1984 22.7021H3.04957C2.48844 22.7021 2.03306 22.2467 2.03306 21.6856V3.38808C2.03306 2.82695 2.48848 2.37158 3.04957 2.37158H12.1984C12.7605 2.37158 13.2149 1.91721 13.2149 1.35507C13.2149 0.792939 12.7605 0.33847 12.1984 0.33847H3.04957C1.36823 0.33847 0 1.70675 0 3.38808V21.6856C0 23.3669 1.36823 24.7351 3.04957 24.7351H12.1984C12.7605 24.7351 13.2149 24.2808 13.2149 23.7186C13.2149 23.1565 12.7605 22.7021 12.1984 22.7021Z"
                                          fill="#8C51EE"/>
                                    <path d="M24.1756 11.813L17.9951 5.71386C17.5967 5.31943 16.9522 5.32455 16.5578 5.72404C16.1634 6.12353 16.1674 6.76698 16.568 7.1614L20.9848 11.5203H9.14932C8.58718 11.5203 8.13281 11.9746 8.13281 12.5368C8.13281 13.0989 8.58718 13.5533 9.14932 13.5533H20.9848L16.568 17.9122C16.1675 18.3066 16.1644 18.95 16.5578 19.3495C16.757 19.5508 17.0193 19.6524 17.2816 19.6524C17.5398 19.6524 17.7979 19.5549 17.9951 19.3597L24.1756 13.2605C24.3688 13.0694 24.4786 12.8091 24.4786 12.5367C24.4786 12.2644 24.3698 12.0052 24.1756 11.813Z"
                                          fill="#8C51EE"/>
                                </g>
                                <defs>
                                    <clipPath id="clip0_134_516">
                                        <rect width="24.478" height="24.478" fill="white"
                                              transform="translate(0 0.297882)"/>
                                    </clipPath>
                                </defs>
                            </svg>
                            Sign Out
                        </span>
                    </li>
                </ul>
            </slot>
        </div>
    </transition>
</div>

<main>
    <div class="container chooseNetwork-container"  v-if="!walletConnected">
        <div class="row">
            <div class="col">
                <h1 class="text-center">Choose network</h1>
            </div>
        </div>
    
            <div class="row align-items-center justify-content-center walletcontainer-wrapper">
                <div class="p-2 m-2 d-flex align-items-center justify-content-center walletcontainer">
                            <div class="p-2 m-2 text-white shadow rounded-2 walletblock justify-content-center align-items-center" id="web3ConnectButton" v-on:click="EthereumConnect">
                        <svg class="walletimg column" width="158" height="158" viewBox="0 0 158 158" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <ellipse cx="78.9139" cy="78.7962" rx="78.3738" ry="78.5424" fill="white"/>
                            <path d="M78.0719 103.405L119.534 78.0432L78.0719 10.7044V103.405Z" fill="#343434"/>
                            <path d="M78.4095 103.405L36.9473 78.0432L78.4095 10.7044V103.405Z" fill="#8B8B8B"/>
                            <path d="M119.534 78.1254L78.0706 60.2556V103.405L119.534 78.1254Z" fill="#141414"/>
                            <path d="M36.9473 78.1254L78.4109 60.2556V103.405L36.9473 78.1254Z" fill="#393939"/>
                            <path d="M78.4085 112.016L37.6191 87.561L78.4085 145.205V112.016Z" fill="#8B8B8B"/>
                            <path d="M78.4077 112.016L119.534 87.561L78.4077 145.205V112.016Z" fill="#3C3C3A"/>
                        </svg>
                        <button class="btn btn-default walletbtn text-center">
                            Ethereum
                        </button>
                    </div>
                    <div class="p-2 m-2 text-white shadow rounded-2 walletblock align-items-center justify-content-center" id="tezozWalletConnect" v-on:click="TezosConnect">
                        <svg class="walletimg column" width="157" height="158" viewBox="0 0 157 158" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <ellipse cx="78.5428" cy="78.7962" rx="78.3738" ry="78.5424" fill="white"/>
                            <path d="M87.2533 116.099C81.1906 116.099 76.7652 114.639 73.9776 111.718C71.3953 109.246 69.8965 105.852 69.8096 102.278C69.7782 101.192 70.0299 100.117 70.5397 99.158C71.0152 98.3293 71.7023 97.6417 72.5307 97.1654C74.4825 96.192 76.7785 96.192 78.7304 97.1654C79.5574 97.6397 80.241 98.3279 80.7103 99.158C81.2348 100.112 81.4959 101.189 81.4665 102.278C81.5206 103.578 81.1476 104.86 80.4044 105.929C79.7851 106.801 78.8998 107.449 77.8811 107.776C78.8771 109.044 80.2864 109.922 81.8635 110.258C83.6282 110.771 85.4555 111.034 87.2929 111.041C89.7257 111.062 92.1084 110.35 94.1299 108.997C96.2274 107.515 97.7912 105.397 98.5905 102.957C99.6032 100.052 100.098 96.992 100.051 93.9164C100.132 90.7099 99.5913 87.5178 98.4576 84.5172C97.6049 82.1173 95.9861 80.0646 93.8509 78.676C91.8665 77.4203 89.5629 76.7613 87.2145 76.778C85.168 76.9513 83.1949 77.6211 81.4659 78.7296L77.2033 80.8667V78.7296L96.3596 53.0312H69.8096V79.6987C69.7345 81.6231 70.2437 83.5251 71.2698 85.155C72.2797 86.5994 73.9716 87.4102 75.7304 87.2921C77.3279 87.2598 78.8726 86.7155 80.1374 85.739C81.571 84.6883 82.8185 83.4051 83.8282 81.942C83.9191 81.6854 84.0867 81.4631 84.3082 81.3051C84.4861 81.1513 84.7132 81.0666 84.9483 81.066C85.4096 81.1082 85.846 81.2937 86.1964 81.5968C86.6402 82.0927 86.8814 82.737 86.8732 83.4022C86.822 83.8494 86.7421 84.2929 86.6342 84.7296C85.6911 87.0126 84.11 88.9752 82.0805 90.3831C80.1954 91.6586 77.9691 92.3349 75.693 92.3233C69.9444 92.3233 65.9622 91.1905 63.7461 88.9248C61.445 86.3952 60.2584 83.046 60.4538 79.6316V53.0306H46.9492V48.0758H60.5166V36.7783L57.4104 33.6698V31.1365H66.4241L69.8099 32.889V48.0756L104.883 47.9688L108.375 51.4735L86.8687 73.0844C88.1681 72.5618 89.5362 72.2308 90.9308 72.1019C93.6906 72.2228 96.3834 72.9915 98.7912 74.3458C101.579 75.6712 103.929 77.7681 105.562 80.388C107.025 82.6058 108.061 85.0777 108.616 87.6761C109.072 89.7257 109.316 91.8167 109.346 93.9164C109.36 97.9232 108.452 101.88 106.691 105.479C105.021 108.964 102.211 111.775 98.7253 113.445C95.1568 115.203 91.2307 116.111 87.2533 116.099Z" fill="black"/>
                            <path d="M104.77 126.295H51.5264C50.5878 126.295 49.8271 125.534 49.8271 124.596C49.8271 123.657 50.5878 122.896 51.5264 122.896H104.77C105.708 122.896 106.469 123.657 106.469 124.596C106.469 125.534 105.708 126.295 104.77 126.295Z" fill="black"/>
                        </svg>
                        <button class="btn btn-default walletbtn text-center">
                            Tezos
                        </button>
                    </div>
                </div>
            </div>
    
    </div>


    <div class="inputForm deviceEditForm" v-if="showDeviceEdit">
        <div style="position:relative; width: 100%">
            <div style="position: absolute; right: 0" v-on:click="CloseInputForms()">
                        <svg width="28" height="27" viewBox="0 0 28 27" fill="none" xmlns="http://www.w3.org/2000/svg" class="closeModalForm">
                    <path d="M1.10758 26.5821C1.19465 26.6692 1.29804 26.7384 1.41185 26.7856C1.52566 26.8327 1.64766 26.857 1.77086 26.857C1.89406 26.857 2.01606 26.8327 2.12987 26.7856C2.24368 26.7384 2.34707 26.6692 2.43414 26.5821L13.956 15.0602L25.4826 26.5821C25.6585 26.758 25.8971 26.8568 26.1459 26.8568C26.3946 26.8568 26.6332 26.758 26.8091 26.5821C26.9851 26.4062 27.0839 26.1676 27.0839 25.9188C27.0839 25.67 26.9851 25.4314 26.8091 25.2555L15.2826 13.7336L26.8045 2.20708C26.9804 2.03116 27.0792 1.79257 27.0792 1.5438C27.0792 1.29502 26.9804 1.05643 26.8045 0.880514C26.6285 0.704601 26.39 0.605774 26.1412 0.605774C25.8924 0.605774 25.6538 0.704601 25.4779 0.880514L13.956 12.4071L2.42945 0.885202C2.25011 0.731614 2.01941 0.651359 1.78347 0.660472C1.54752 0.669586 1.3237 0.767397 1.15674 0.934361C0.989775 1.10132 0.891963 1.32514 0.88285 1.56109C0.873736 1.79704 0.953992 2.02773 1.10758 2.20708L12.6295 13.7336L1.10758 25.2602C0.932969 25.4359 0.834961 25.6735 0.834961 25.9211C0.834961 26.1688 0.932969 26.4064 1.10758 26.5821Z" fill="black"/>
                </svg>
            </div>
        </div>
        <div>
            <span class="modal-title">Device</span>
            <span v-if="deviceStatuses.indexOf(selectedDeviceId) !== -1" style="color: #0FFF50">Online</span>
            <span v-else style="color: #FF5733">Offline</span>
        </div>

        <div class="modal-form">
            <div class="device-update-form row">
                        <div class="col-md-6 col-sm-12">
                    <div class="modal-form-title">Name</div>
                    <div class="modal-form-description">It`s how you will call your Snitch to separate them. Exmaple: "gold Snitch", "gray Snitch", "Snitch for everyday". Max 60 chars.</div>
                    <div><input
                        type="text"
                        id="deviceAliasInput"
                        maxlength="60"
                        placeholder="ex. device one"
                        :value="selectedDeviceAlias"
                        class="modal-form-input"/> </div>
                </div>

                <div class="col-md-6 col-sm-12">
                    <div class="modal-form-title">Device ID</div>
                    <div class="modal-form-description">This filed you cannot change. It`s Id of Snitch, to which you add Name.</div>
                    <div><input
                        type="text"
                        disabled
                        id="deviceIdInput"
                        placeholder="ex. 00:00:00:00:00:00"
                        :value="selectedDeviceId"
                                       class="modal-form-input" />
                            </div>
                </div>
            </div>
        </div>
        <div class="device-change-buttons-wrapper row">
            <div class="col">
                <button
                        class="modal-button device-edit-update-button"
                        id="updateDeviceButton"
                        v-on:click="UpdateDeviceWithForm()">
                        Update <i class="fas fa-sync"></i>
                </button>
            </div>
            <div class="col">
                <button
                        class="modal-button device-edit-delete-button"
                        id="deleteDeviceButton"
                        v-on:click="DeleteDeviceWithForm()">
                            Delete <svg width="27" height="27" viewBox="0 0 27 27" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M17.7759 24.2544H9.63357C8.81893 24.2426 8.03876 23.9238 7.44907 23.3616C6.85938 22.7994 6.50363 22.0354 6.45296 21.2222L5.48817 6.549C5.48323 6.44262 5.49942 6.33631 5.53582 6.23622C5.57221 6.13613 5.62809 6.04425 5.70021 5.96589C5.77452 5.88468 5.86448 5.81933 5.96469 5.77379C6.0649 5.72824 6.17328 5.70342 6.28333 5.70084H21.1262C21.2352 5.7006 21.3431 5.72278 21.4432 5.76601C21.5433 5.80925 21.6335 5.87261 21.7081 5.95215C21.7826 6.0317 21.84 6.12573 21.8767 6.22841C21.9134 6.33108 21.9286 6.44021 21.9213 6.549L20.999 21.2222C20.9478 22.0426 20.586 22.8127 19.9874 23.376C19.3887 23.9392 18.5979 24.2533 17.7759 24.2544ZM7.1739 7.29114L7.99026 21.1268C8.01723 21.544 8.2022 21.9353 8.50751 22.2209C8.81281 22.5065 9.2155 22.665 9.63357 22.6641H17.7759C18.1933 22.6625 18.5946 22.5031 18.8993 22.218C19.2041 21.9329 19.3898 21.5431 19.4193 21.1268L20.278 7.34416L7.1739 7.29114Z" fill="#F10000" />
                                <path d="M23.246 7.29114H4.16234C3.95145 7.29114 3.7492 7.20737 3.60008 7.05825C3.45096 6.90913 3.36719 6.70688 3.36719 6.49599C3.36719 6.2851 3.45096 6.08285 3.60008 5.93373C3.7492 5.78461 3.95145 5.70084 4.16234 5.70084H23.246C23.4569 5.70084 23.6592 5.78461 23.8083 5.93373C23.9574 6.08285 24.0412 6.2851 24.0412 6.49599C24.0412 6.70688 23.9574 6.90913 23.8083 7.05825C23.6592 7.20737 23.4569 7.29114 23.246 7.29114Z" fill="#F10000" />
                                <path d="M16.8849 7.29114H10.5237C10.3136 7.28839 10.113 7.20374 9.96445 7.05521C9.81592 6.90668 9.73126 6.70602 9.72852 6.49598V4.58762C9.74196 4.04354 9.96408 3.52546 10.3489 3.14062C10.7338 2.75579 11.2518 2.53366 11.7959 2.52022H15.6127C16.1658 2.53405 16.6916 2.76354 17.0779 3.15971C17.4641 3.55587 17.6802 4.08732 17.68 4.64063V6.49598C17.6773 6.70602 17.5926 6.90668 17.4441 7.05521C17.2956 7.20374 17.0949 7.28839 16.8849 7.29114ZM11.3188 5.70083H16.0897V4.64063C16.0897 4.51409 16.0395 4.39274 15.95 4.30327C15.8605 4.2138 15.7392 4.16353 15.6127 4.16353H11.7959C11.6694 4.16353 11.548 4.2138 11.4586 4.30327C11.3691 4.39274 11.3188 4.51409 11.3188 4.64063V5.70083Z" fill="#F10000" />
                                <path d="M16.885 20.0136C16.675 20.0108 16.4743 19.9262 16.3258 19.7777C16.1772 19.6291 16.0926 19.4285 16.0898 19.2184V10.7368C16.0898 10.5259 16.1736 10.3237 16.3227 10.1745C16.4719 10.0254 16.6741 9.94165 16.885 9.94165C17.0959 9.94165 17.2981 10.0254 17.4473 10.1745C17.5964 10.3237 17.6802 10.5259 17.6802 10.7368V19.2184C17.6774 19.4285 17.5927 19.6291 17.4442 19.7777C17.2957 19.9262 17.095 20.0108 16.885 20.0136Z" fill="#F10000" />
                                <path d="M10.5237 20.0136C10.3136 20.0108 10.113 19.9262 9.96445 19.7777C9.81592 19.6291 9.73126 19.4285 9.72852 19.2184V10.7368C9.72852 10.5259 9.81229 10.3237 9.96141 10.1745C10.1105 10.0254 10.3128 9.94165 10.5237 9.94165C10.7346 9.94165 10.9368 10.0254 11.0859 10.1745C11.235 10.3237 11.3188 10.5259 11.3188 10.7368V19.2184C11.3161 19.4285 11.2314 19.6291 11.0829 19.7777C10.9344 19.9262 10.7337 20.0108 10.5237 20.0136Z" fill="#F10000" />
                                <path d="M13.7043 20.0136C13.4943 20.0108 13.2936 19.9262 13.1451 19.7777C12.9966 19.6291 12.9119 19.4285 12.9092 19.2184V10.7368C12.9092 10.5259 12.993 10.3237 13.1421 10.1745C13.2912 10.0254 13.4934 9.94165 13.7043 9.94165C13.9152 9.94165 14.1175 10.0254 14.2666 10.1745C14.4157 10.3237 14.4995 10.5259 14.4995 10.7368V19.2184C14.4967 19.4285 14.4121 19.6291 14.2636 19.7777C14.115 19.9262 13.9144 20.0108 13.7043 20.0136Z" fill="#F10000" />
                            </svg>

                 </button>   
             </div>
        </div>
    </div>

    <div class="inputForm castYourTockenForm" v-if="showTokenDisplayOptions">
        <div style="position:relative; width: 100%">
            <div style="position: absolute; right: 0" v-on:click="CloseInputForms()">
                <svg width="28" height="27" viewBox="0 0 28 27" fill="none" xmlns="http://www.w3.org/2000/svg" class="closeModalForm">
                    <path d="M1.10758 26.5821C1.19465 26.6692 1.29804 26.7384 1.41185 26.7856C1.52566 26.8327 1.64766 26.857 1.77086 26.857C1.89406 26.857 2.01606 26.8327 2.12987 26.7856C2.24368 26.7384 2.34707 26.6692 2.43414 26.5821L13.956 15.0602L25.4826 26.5821C25.6585 26.758 25.8971 26.8568 26.1459 26.8568C26.3946 26.8568 26.6332 26.758 26.8091 26.5821C26.9851 26.4062 27.0839 26.1676 27.0839 25.9188C27.0839 25.67 26.9851 25.4314 26.8091 25.2555L15.2826 13.7336L26.8045 2.20708C26.9804 2.03116 27.0792 1.79257 27.0792 1.5438C27.0792 1.29502 26.9804 1.05643 26.8045 0.880514C26.6285 0.704601 26.39 0.605774 26.1412 0.605774C25.8924 0.605774 25.6538 0.704601 25.4779 0.880514L13.956 12.4071L2.42945 0.885202C2.25011 0.731614 2.01941 0.651359 1.78347 0.660472C1.54752 0.669586 1.3237 0.767397 1.15674 0.934361C0.989775 1.10132 0.891963 1.32514 0.88285 1.56109C0.873736 1.79704 0.953992 2.02773 1.10758 2.20708L12.6295 13.7336L1.10758 25.2602C0.932969 25.4359 0.834961 25.6735 0.834961 25.9211C0.834961 26.1688 0.932969 26.4064 1.10758 26.5821Z" fill="black"/>
                </svg>
            </div>
        </div>

        <span class="modal-title">Cast your token</span>

        <div class="modal-form">
            <div class="row">

                <div class="col-md-6 col-sm-12">
                    <div class="modal-form-title">NFT editor</div>
                    <div class="modal-form-description">Here you can rotate, zoom, set up background for your NFT.</div>
                </div>
                 <div class="col-md-6 d-none d-md-block">
                    <div class="modal-form-title">On Snitch</div>
                    <div class="modal-form-description">Final view after NFT Editor. This image will be shown on your Snitch!</div>
                </div>

                <div class="col-md-6 col-sm-12 center">
                    <div style="width: 330px;height: 401px">
                        <cropper
                            ref="cropper"
                            id="tokenPreviewContainer"
                            :src="selectedToken.image_url"
                            :stencil-props="{aspectRatio: 368/448}"
                            image-restriction="none"
                            background-class="cropper-background"
                            v-on:change="cropperChange">
                        </cropper>
                    
                        <button v-on:click="rotate(90)" style="position: absolute;top: 5px;left: 20px;" type="button" class="btn btn-sm btn-outline-light"><i class="fa fa-flip-vertical fa fa-undo"></i></button>
                        <button v-on:click="rotate(-90)" style="position: absolute;top: 40px;left: 20px;" type="button" class="btn btn-sm btn-outline-light"><i class="fa fa-undo"></i></button>
                    </div>
                </div>


                <div class="d-md-none">
                    <div class="modal-form-title">On Snitch</div>
                    <div class="modal-form-description">Final view after NFT Editor. This image will be shown on your Snitch!</div>
                </div>
                <div class="col-md-6 col-sm-12">
                    <div class="nft-preview"> <!-- mt-1 deprecated -->
                        <img
                            :style="{backgroundColor: selectedBackgroundColor}"
                            v-if="canvas"
                            ref="preview"
                            :src="canvas"/>
                    </div>
                </div>

            </div>

            <div style="padding-top:3em; text-align:left;">
                <div class="modal-form-title">Background color</div>
                        <div class="modal-form-description">If you zoom image smaller, than Snitch dimensions - this background color will be visisble.</div>
                <div
                    v-for="color in backgroundColorPallete"
                    class="gallery"
                    v-on:click="ColorSelected(color)"
                    v-bind:style="{ backgroundColor: color }"
                    style="width: 2em; height: 2em;">
                </div>
                <!--<div
                    id="colorPicker"
                    style="width: 2em; height: 2em; background-size: contain; cursor: pointer"
                    v-on:click="ColorSelected(eyedropperSelectedColor)"
                    v-bind:style="{backgroundColor: eyedropperHoverColor, backgroundImage: eyedropperImage}"
                    class="gallery">
                        </div>-->
            </div>
            <!-- <div style="padding-top:1em; text-align:left;">
                <div class="menuFont">Border width percentage</div>
                <div style="width:100%">
                    <input type="range" min="0" max="35" value="5" class="slider" v-model="borderWidthPercent">
                </div>
                <div class="menuFont">Fit screen</div>
                <input type="checkbox" v-model="fitScreen" v-on:click="borderWidthPercent = !fitScreen? 0 : borderWidthPercent" />
                <div class="menuFont">Rotate orientation</div>
                <input type="checkbox" v-model="orientationVertical" />
                <span v-if="displayingOwnedToken">
                    <div class="menuFont">Show Metadata</div>
                    <input type="checkbox" v-model="showMetadata" />
                </span>
            </div> -->

                    <div style="padding-top:3em; text-align:left;">
                <span class="modal-form-title">Device</span>
                <span v-if="deviceStatuses.indexOf(selected) !== -1" class="device-online-status">Online</span>
                <span v-else class="device-offline-status">Offline</span>
            </div>
            @* <span class="modal-form-description">Select one of your`s Snitches on which NFT will be shown.</span> *@

            <select id="deviceSelection" class="device-cast-select" v-model="selected">
                <option v-for="device in account.devices" :value="device">
                    {{ GetDeviceAlias(device) }}
                </option>
            </select>
        </div>

                <button class="modal-button device-edit-update-button" id="displayTokenButton" v-on:click="CastToken()">Cast NFT <i class="fab fa-chromecast"></i></button>
    </div>

    <div class="inputForm registerNewSnitchForm" v-if="showAddDeviceInput">
        <div style="position:relative; width: 100%">
            <div style="position: absolute; right: 0" v-on:click="CloseInputForms()">
                        <svg width="28" height="27" viewBox="0 0 28 27" fill="none" xmlns="http://www.w3.org/2000/svg" class="closeModalForm">
                    <path d="M1.10758 26.5821C1.19465 26.6692 1.29804 26.7384 1.41185 26.7856C1.52566 26.8327 1.64766 26.857 1.77086 26.857C1.89406 26.857 2.01606 26.8327 2.12987 26.7856C2.24368 26.7384 2.34707 26.6692 2.43414 26.5821L13.956 15.0602L25.4826 26.5821C25.6585 26.758 25.8971 26.8568 26.1459 26.8568C26.3946 26.8568 26.6332 26.758 26.8091 26.5821C26.9851 26.4062 27.0839 26.1676 27.0839 25.9188C27.0839 25.67 26.9851 25.4314 26.8091 25.2555L15.2826 13.7336L26.8045 2.20708C26.9804 2.03116 27.0792 1.79257 27.0792 1.5438C27.0792 1.29502 26.9804 1.05643 26.8045 0.880514C26.6285 0.704601 26.39 0.605774 26.1412 0.605774C25.8924 0.605774 25.6538 0.704601 25.4779 0.880514L13.956 12.4071L2.42945 0.885202C2.25011 0.731614 2.01941 0.651359 1.78347 0.660472C1.54752 0.669586 1.3237 0.767397 1.15674 0.934361C0.989775 1.10132 0.891963 1.32514 0.88285 1.56109C0.873736 1.79704 0.953992 2.02773 1.10758 2.20708L12.6295 13.7336L1.10758 25.2602C0.932969 25.4359 0.834961 25.6735 0.834961 25.9211C0.834961 26.1688 0.932969 26.4064 1.10758 26.5821Z" fill="black"/>
                </svg>
            </div>
        </div>
        <span class="modal-title">Register new Snitch</span>

        <div class="modal-form">
            <div class="device-add-form">
                <div style="display: flex; flex-direction: column">
                    <span class="modal-form-title">Snitch Id</span>
                    <span class="modal-form-description">Put below your Snitch Id to connect to your wallet.</span>
                    <input
                        id="deviceIdInput"
                        type="text"
                        placeholder="00:00:00:00:00:00"
                        class="modal-form-input"/>
                </div>

                <!-- <qrcode-stream v-on:decode="onQrcodeDecode" v-on:init="onQrcodeInit"></qrcode-stream> -->
            </div>
        </div>

        <div>
            <button class="device-add-button modal-button" v-on:click="AddDeviceWithForm()">Add <i class="fas fa-plus"></i> </button>
        </div>
    </div>

    <div class="modal" v-if="showModal" v-on:click="CloseInputForms()">
    </div>

    <div class="content" v-if="walletConnected">
        <div class="title" v-if="showNoTokensMessage">
            <span class="title-first-part">Sorry, but no NFT on your wallet </span>
            <span class="title-second-part">{{ shortenedAddress }}</span>
        </div>

        <div class="title" v-if="tokensLoaded && !showNoTokensMessage">
            <span class="title-first-part">Browse your</span>
            <span class="title-second-part">NFT's</span>
        </div>

        <div class="proveOwrnershipInfo row" v-if="walletConnected && showSignMessage">
            <div class="col-12 text-center">
                <div class="icon-wrapper">
                    <i class="fas fa-lock-open"></i>
                </div>
            </div>
            <div class="col-12">
                <h1>Attention!<br />Needs access!</h1>
                <p>Please approve the access from your wallet application</p>
             </div>
        </div>

        <div class="fetchingTockenInfo row" v-if="walletConnected && showFetchingTokensMessage">
            <div class="col text-center">
                <h1>Fetching tokens...</h1>
            </div>
        </div>

        <div class="search" v-if="tokensLoaded && !showNoTokensMessage">
            <div class="search-container">
                <input
                    id="searchField"
                    type="text"
                    class="search-input"
                    placeholder="Search whatever you want..."
                    aria-label="Search whatever you want..."
                    aria-describedby="basic-addon2">
                <button class="search-button" type="button" v-on:click="SearchToken">Search</button>
            </div>
        </div>

        <div class="nfts-list" v-if="tokensLoaded">
            <div
                class="nft-container"
                v-for="token in filteredItems"
                v-bind:key="token.image_url"
                v-on:click="TokenSelected(token, true)">
                <img class="nft-image" v-bind:src="token.image_url" alt="nft_image">
                <span class="nft-name">{{ token.name }}</span>
            </div>
        </div>

    </div>
</main>
<footer>
    <div class="footer-container">
        <div>
            <h2>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 332.44 59.01"><g id="Слой_2" data-name="Слой 2"><g id="Camada_1" data-name="Camada 1"><path d="M39.23,11.37q-12.85,0-25.72,0h-.95v0a16.43,16.43,0,0,0-4.36.71C2.42,14,.64,17.93.17,20.94a10.23,10.23,0,0,0,3.31,9.79,12.46,12.46,0,0,0,8,3.06c3.48.07,7,.06,10.4.05,2,0,4.07,0,6.1,0a16.63,16.63,0,0,1,3,.25A2.45,2.45,0,0,1,32.6,35,2,2,0,0,1,32,37.8a5.24,5.24,0,0,1-3.34.84H0v9H28a18.64,18.64,0,0,0,4.33-.32,13,13,0,0,0,6.42-3.16A10.83,10.83,0,0,0,42,35a10.07,10.07,0,0,0-5-8.09,13.68,13.68,0,0,0-7.08-2c-3.84,0-7.75,0-11.52,0h-4a11,11,0,0,1-4-.45A1.91,1.91,0,0,1,9.19,23a1.79,1.79,0,0,1,.65-1.68,5,5,0,0,1,3.5-1c5.71,0,11.41,0,17.12,0h8.86a3.74,3.74,0,0,0,.49,0h2.27V11.37H39.23Z" /><rect x="89.69" y="11.33" width="8.85" height="36.29" /><path d="M116.39,18.29V11.36H101.15v8.93h14.79a10,10,0,0,0-.12,1.23v26h8.9V20.29h16.39V11.36H126A10.12,10.12,0,0,0,116.39,18.29Z" /><path d="M163.08,11.38h-3.56a20.85,20.85,0,0,0-7.6,1.37,16.32,16.32,0,0,0-8.78,7.84,19.68,19.68,0,0,0-1.69,12.62c1.43,8.51,8,14,17.14,14.38,1.44.06,2.89.08,4.33.08l21.25,0v-9l-25.13,0a10.77,10.77,0,0,1-2.84-.41,7.84,7.84,0,0,1-5.95-6.39,15.8,15.8,0,0,1-.19-3.26,7.84,7.84,0,0,1,1.08-3.93,8.41,8.41,0,0,1,7.71-4.29c2.15-.05,23.16-.06,25.32-.07v-8.9Z" /><path d="M78.75,11.36V38.64c-.82,0-1.6,0-2.37,0a1.69,1.69,0,0,1-1.53-1q-2.1-4-4.17-8Q69.36,27,68,24.43L67,22.34C66,20.46,65,18.52,63.89,16.66a11,11,0,0,0-9.06-5.25c-1.84-.11-3.68-.09-5.46-.06H47.78v0H44.13v4.6c0,7.12,0,28.55,0,31.75H53V23.09c0-.93,0-1.86,0-2.8.78,0,1.53,0,2.25.05a1.9,1.9,0,0,1,1.68,1.1q1.07,2,2.1,4l1,1.87,2.15,4.18c1.69,3.29,3.44,6.7,5.23,10a11.21,11.21,0,0,0,9.21,6c1.07.08,2.14.11,3.19.11.84,0,1.66,0,2.48,0s1.59,0,2.39,0h3v-2.8c0-3.86,0-29.58,0-33.45Z" /><path d="M229.63,32.28V11.37h-8.87V24.88H203.33c-5.81,0-7.86,5.82-7.86,5.82V24.89h0V11.37h-8.86c0,5.24,0,27.76,0,36.3h8.87V33.81h25.3c0,.73,0,13.14,0,13.86h8.87C229.63,46.44,229.62,33.52,229.63,32.28Z" /><path d="M234.91,11.36a2.35,2.35,0,1,0,2.35,2.35A2.36,2.36,0,0,0,234.91,11.36Zm0,4.29a1.94,1.94,0,1,1,1.94-1.94A1.93,1.93,0,0,1,234.91,15.65Z" /><path d="M235.84,13.74a.76.76,0,0,0,.13-.44.72.72,0,0,0-.27-.59,1,1,0,0,0-.67-.23h-1v2.37h.5v-.74h.41l.59.74h.6l-.65-.82A.83.83,0,0,0,235.84,13.74Zm-.5-.19a.52.52,0,0,1-.33.1h-.49v-.71H235a.52.52,0,0,1,.33.1.29.29,0,0,1,.13.26A.3.3,0,0,1,235.34,13.55Z" /><path d="M331.78,16.8h-10.4a.71.71,0,0,1-.71-.71V.75a.75.75,0,0,0-.75-.75H309.67a2.81,2.81,0,0,0-2.13,1L273,42a.6.6,0,0,1-1.06-.38l-.05-10.83a3.31,3.31,0,0,1,.83-2.2l11.23-12.74a2.25,2.25,0,0,0,.57-1.51V.75a.74.74,0,0,0-.75-.75H273a2.5,2.5,0,0,0-1.88.85L260.82,12.6a2.92,2.92,0,0,0-.74,2V42.18a1.24,1.24,0,0,0,1.25,1.23h9.77a.74.74,0,0,1,.75.75V58A1.07,1.07,0,0,0,272.93,59h10.64a2,2,0,0,0,1.45-.66l34.69-40.29a.54.54,0,0,1,.94.34l0,9.56a3.93,3.93,0,0,1-.81,2.48L309.19,42.87a3.38,3.38,0,0,0-.82,2.21V58A1.07,1.07,0,0,0,309.44,59h10.47a2,2,0,0,0,1.47-.67l10.35-12a2.88,2.88,0,0,0,.71-1.89v-27A.66.66,0,0,0,331.78,16.8Z" /><path d="M331.41,53.27l-4.17,4.78a.58.58,0,0,0,.44,1h3.95a.8.8,0,0,0,.81-.8V53.64A.59.59,0,0,0,331.41,53.27Z" /><path d="M261.11,5.74,265.29,1a.58.58,0,0,0-.45-1H261a.87.87,0,0,0-.88.86v4.5A.59.59,0,0,0,261.11,5.74Z" /></g></g></svg>
            </h2>
            <span>©{{ new Date().getFullYear() }}. Snitch. All rights reserved.</span>
        </div>
                <div class="email-container-wrapper">
            <div class="email-container">
                <input
                    type="text"
                    class="email-input"
                    placeholder="Leave your E-mail to keep updated."
                    aria-label="Leave your E-mail to keep updated..">
                <span style="flex-grow: 1"></span>
                <button type="button" class="email-button">be in touch</button>
            </div>
        </div>
    </div>
</footer>
</div>

</body>

<script type="text/javascript">
  web3Account = ""
  signature = ""

  const app = new Vue({
    el: '#app',
    data: {
      address: '',
      account: '',
      network: '',
      searchFieldProperty: '',
      tokens: '',
      filteredTokens: '',
      communityTokens: '',
      showSignMessage: true,
      showFetchingTokensMessage: false,
      tokensLoaded: false,
      tokensByDevice: [],
      showNoTokensMessage: false,
      showAddDeviceButton: false,
      showAddDeviceInput: false,
      isBurgerActive: false,
      viewDevices: false,
      showTokenDisplayOptions: false,
      selectedToken: null,
      backgroundColorPallete: [],
      selectedBackgroundColor: "#ffffff",
      tokenPreviewHeight: 300,
      tokenPreviewWidth: 500,
      borderWidthPercent: 5,
      borderWidthInPx: '0px',
      fitScreen: false,
      orientationVertical: false,
      showMetadata: true,
      selectedDeviceId: '',
      selectedDeviceAlias: '',
      isCanviaDevice: '',
      rotationFrequency: '',
      showDeviceEdit: false,
      eyedropperSelectedColor: "#ffffff",
      eyedropperHoverColor: "#ffffff",
      displayingOwnedToken: true,
      providedWeb3: '',
      dAppClient: '',
      tezosWalletConnected: false,
      whitelabeler: '',
      selected: '',
      deviceStatuses: [],
      deviceStatusSocket: null,
      cropperImage: null,
      cropperParams: { x: 0, y: 0, scale: 1, isMoving: false, height: null, width: null, isGif: false },
      canvas: null
    },
    async mounted () {
      await onLoad(true, false)
      // const resp = await fetch('/connect/ui/create', { method: 'POST' })
      // const { connectionId } = await resp.json()
      // this.deviceStatusesSocket = new WebSocket(
      //   `wss://localhost:5001/connect/ui?connectionId=${connectionId}&address=${app.address}`
      // );
      //
      // this.deviceStatusesSocket.onmessage = (event) => {
      //   console.log("device statuses event", event.data)
      //   const data = JSON.parse(event.data)
      //
      //   if (data.event == 'Online') {
      //     this.deviceStatuses[data.deviceId] = true
      //   }
      //
      //   if (data.event == 'Offline') {
      //     this.deviceStatuses[data.deviceId] = false
      //   }
      // }
    },
    computed: {
      filteredItems() {
        const filter = this.searchFieldProperty
        return this.tokens.filter(function(item) {
          return item.name.includes(filter) || filter === ""
        })
      },
      walletConnected () {
        return this.providedWeb3 !== '' || this.tezosWalletConnected === true
      },
      showModal () {
        const shouldShowModal = this.showTokenDisplayOptions || this.showAddDeviceInput || this.showDeviceEdit
        if (shouldShowModal) {
          $('html,body').scrollTop(0)
        }
        return shouldShowModal
      },
      tokenHeight () {
        const borderWidthInPx = this.borderWidthPercent * .01 * this.tokenPreviewHeight
        this.borderWidthInPx = borderWidthInPx + "px"
        const borderHeight = borderWidthInPx * 2
        return (this.tokenPreviewHeight - borderHeight) + "px"
      },
      tokenWidth () {
        const borderWidthInPx = this.borderWidthPercent * .01 * this.tokenPreviewWidth
        this.borderWidthInPx = borderWidthInPx + "px"
        const borderHeight = borderWidthInPx * 2
        return (this.tokenPreviewWidth - borderHeight) + "px"
      },
      shortenedAddress () {
        const addressLength = this.address.length
        if (addressLength > 20) {
          return this.address.substring(0, 7) + "..." + this.address.substring(addressLength - 8, addressLength)
        }
        return this.address
      },
      showHamburger () {
        return this.isBurgerActive && !this.showModal
      },
      eyedropperImage () {
        const c = this.eyedropperHoverColor.substring(1)      // strip #
        const rgb = parseInt(c, 16)   // convert rrggbb to decimal
        const r = (rgb >> 16) & 0xff  // extract red
        const g = (rgb >>  8) & 0xff  // extract green
        const b = (rgb >>  0) & 0xff  // extract blue

        const luma = 0.2126 * r + 0.7152 * g + 0.0722 * b // per ITU-R BT.709

        if (luma < 100) {
          // pick a different colour
          return "url('images/eye_dropper_white.png')"
        }
        else {
          return "url('images/eye_dropper.png')"
        }
      },
      whitelabeled () {
        return !!this.whitelabeler && !!whiteLabelers[this.whitelabeler]
      },
      title () {
        if (!this.whitelabeled) {
          return "TokenCast"
        }
        return whiteLabelers[this.whitelabeler].title
      },
      homeUrl () {
        if (!this.whitelabeled) {
          return "https://tokencast.net"
        }
        return whiteLabelers[this.whitelabeler].url + "/account?whitelabel=" + this.whitelabeler
      },
      hasLogo: function () {
        if (!this.whitelabeled) {
          return false
        }
        return whiteLabelers[this.whitelabeler].logo !== undefined
      },
      logoImageUrl: function () {
        if (!this.whitelabeled) {
          return false
        }
        return "images/" + whiteLabelers[this.whitelabeler].logo
      },
      signatureMessage: function () {
        if (!this.whitelabeled || !whiteLabelers[this.whitelabeler].signatureMessage) {
          return 'TokenCast - proof of ownership. Please sign this message to prove ownership over your Ethereum account.'
        }
        return whiteLabelers[this.whitelabeler].signatureMessage
      }
    },
    methods: {
      cropperWheel(event) {
        event.preventDefault();

        this.cropperParams.scale += event.deltaY * 0.001;
        this.cropperParams.scale = Math.min(Math.max(.4, this.cropperParams.scale), 7);

        const canvas = document.querySelector("#tokenPreviewContainer");
        this.updateCanvas(canvas);
      },
      cropperOnMousemove(event) {
        if (!this.cropperParams.isMoving) {
          return;
        }

        const canvas = document.querySelector("#tokenPreviewContainer")

        this.cropperParams.x += event.movementX;
        this.cropperParams.y += event.movementY;

        this.updateCanvas(canvas);
      },
      updateCanvas(canvas, imageUrl) {
        const ctx = canvas.getContext("2d");

        if (this.cropperParams.x < ((this.cropperParams.width / this.cropperParams.scale) * -1) + 50) {
            this.cropperParams.x = ((this.cropperParams.width / this.cropperParams.scale) * -1) + 50
        }

        if (this.cropperParams.x > 368 - 50) {
            this.cropperParams.x =  368 - 50;
        }

        if (this.cropperParams.y < ((this.cropperParams.height / this.cropperParams.scale) * -1) + 50) {
            this.cropperParams.y = ((this.cropperParams.height / this.cropperParams.scale) * -1) + 50
        }

        if (this.cropperParams.y > 448 - 50) {
            this.cropperParams.y = 448 - 50
        }

        if (!this.cropperParams.isGif && this.cropperImage) {
          ctx.clearRect(0, 0, 368, 448);
          ctx.drawImage(
            this.cropperImage,
            this.cropperParams.x,
            this.cropperParams.y,
            this.cropperParams.width / this.cropperParams.scale, 
            this.cropperParams.height / this.cropperParams.scale
          );
        }
      },
      onDrawFrame(ctx, frame) {
        ctx.clearRect(0, 0, 368, 448);

        ctx.drawImage(
          frame.buffer,
          this.cropperParams.x,
          this.cropperParams.y,
          this.cropperParams.width / this.cropperParams.scale, 
          this.cropperParams.height / this.cropperParams.scale
        );
      },
      cropperOnMousedown () {
        this.cropperParams.isMoving = true;
      },
      cropperOnMouseup () {
        this.cropperParams.isMoving = false;
      },
      cropperChange ({ coordinates, canvas }) {
        this.cropperParams = coordinates
        this.canvas = canvas.toDataURL()
      },
      onQrcodeDecode (value) {
        document.getElementById("deviceIdInput").value = value
      },
      async onQrcodeInit (promise) {
        let error
        try {
          await promise
        } catch (e) {
          if (e.name === 'NotAllowedError') {
            error = "ERROR: you need to grant camera access permission"
          } else if (e.name === 'NotFoundError') {
            error = "ERROR: no camera on this device"
          } else if (e.name === 'NotSupportedError') {
            error = "ERROR: secure context required (HTTPS, localhost)"
          } else if (e.name === 'NotReadableError') {
            error = "ERROR: is the camera already in use?"
          } else if (e.name === 'OverconstrainedError') {
            error = "ERROR: installed cameras are not suitable"
          } else if (e.name === 'StreamApiNotSupportedError') {
            error = "ERROR: Stream API is not supported in this browser"
          } else if (e.name === 'InsecureContextError') {
            error = 'ERROR: Camera access is only permitted in secure context. Use HTTPS or localhost rather than HTTP.';
          } else {
            error = `ERROR: Camera error (${e.name})`;
          }
          window.alert(error)
        }
      },
      SearchToken() {
        this.searchFieldProperty = document.getElementById("searchField").value
      },
      EthereumConnect () {
        onConnectEthereum()
      },
      TezosConnect () {
        onConnectTezos()
      },
      async SignOut () {
        this.isBurgerActive = false
        this.providedWeb3 = ''
        this.tokensLoaded = false
        this.tezosWalletConnected = false
        this.showNoTokensMessage = false
        window.localStorage.removeItem(getSignatureKey(app.address, app.network))
        await web3Modal.clearCachedProvider()
        if (app.dAppClient) {
          await app.dAppClient.clearActiveAccount()
        }

        window.localStorage.removeItem('walletconnect')
      },
      async FetchCanviaDevices () {
        const queryString = window.location.search
        const urlParams = new URLSearchParams(queryString)
        const code = urlParams.get('code')
        if (code !== null) {
          await AddCanviaDevices(code, app.address)
        }
      },
      OAuthWithCanvia () {
        this.showAddDeviceInput = false
        const canviaLoginlink = "https://prod.palacio.life/backend/oauth/login.html?client_id=659fb248-18dc-497e-9b31-3419935e555f&grant_type=authorization_code&response_type=code"
        window.open(canviaLoginlink)
      },
      async TokenSelected (token, ownedToken) {
        this.backgroundColorPallete = []
        this.selectedBackgroundColor = "#ffffff"
        this.selectedToken = token
        // Generate color pallete
        const vibrantOptions = {
          colorCount: 7
        }
        if (token.background_color != null) {
          this.backgroundColorPallete.push("#" + token.background_color)
          this.selectedBackgroundColor = "#" + token.background_color
        }
        if ("#" + token.background_color !== "#ffffff") {
          this.backgroundColorPallete.push("#ffffff")
        }
        if ("#" + token.background_color !== "#000000") {
          this.backgroundColorPallete.push("#000000")
        }
        const vibrant = new Vibrant(token.image_url, vibrantOptions)
        vibrant.getPalette((err, palette) => {
          for (const color in palette) {
            this.backgroundColorPallete.push(palette[color].hex)
          }
        })
        this.showTokenDisplayOptions = true
        this.displayingOwnedToken = ownedToken
        this.showMetadata = true

        this.cropperImage = null;

        const { naturalHeight, naturalWidth } = await this.GetImageMeta(this.selectedToken.image_url);
        const ratio = Math.min(368 / naturalWidth, 448 / naturalHeight);

        this.cropperParams.width = naturalWidth * ratio;
        this.cropperParams.height = naturalHeight * ratio;
        this.cropperParams.x = 0;
        this.cropperParams.y = 0;

        console.log(this.cropperParams)

        const image = await fetch(this.selectedToken.image_url, { method: 'HEAD' });
        const imageBlob = await image.blob()

        const canvas = document.querySelector("#tokenPreviewContainer");
        const ctx = canvas.getContext("2d");
        ctx.clearRect(0, 0, 368, 448);
        ctx.font = "20px Arial, sans-serif";
        ctx.fillText("Loading...", 10, 50);

        this.cropperParams.isGif = imageBlob.type === 'image/gif';

        if (this.cropperParams.isGif) {
          gifler(this.selectedToken.image_url).frames('canvas#tokenPreviewContainer', this.onDrawFrame);
        } else {
          this.cropperImage = new Image();
          this.cropperImage.crossorigin = "anonymous";
          this.cropperImage.src = this.selectedToken.image_url;
          this.cropperImage.onload = () => {
            this.updateCanvas(canvas);
          }
        }
      },
      DeviceSelected (deviceId) {
        this.selectedDeviceId = deviceId
        this.selectedDeviceAlias = this.GetNameDeviceAlias(deviceId)
        this.isCanviaDevice = this.GetIsCanviaDevice(this.selectedDeviceAlias)
        this.selectedDeviceId = deviceId
        this.showDeviceEdit = true
        GetDeviceRotationFrequency(deviceId)
        this.GetTokensOnQueue()
      },

      GetDeviceAlias (deviceId) {
        if (this.account.deviceMapping && deviceId in this.account.deviceMapping) {
          return "\"" + this.account.deviceMapping[deviceId] + "\"" + " - " + "\"" + deviceId + "\""
        }

        return deviceId
      },

      GetNameDeviceAlias (deviceId) {
        if (this.account.deviceMapping && deviceId in this.account.deviceMapping) {
          return this.account.deviceMapping[deviceId]
        }

        return deviceId
      },

      GetIsCanviaDevice (deviceId) {
        return !!(this.account.canviaAccount.canviaDevices && deviceId in this.account.canviaAccount.canviaDevices);
      },
      GetImageMeta (url, cb) {
        return new Promise((resolve, reject) => {
          const img = new Image();
          img.onload = () => resolve(img);
          img.onerror = (err) => reject(err);
          img.src = url;
        });
      },
      async CastToken () {
        const token = this.selectedToken
        const device = document.getElementById("deviceSelection").value
        storeLastUsedDevice(device)
        // Prefer animation if it exists
        let tokenImageUrl = token.animation_url
        if (!token.animation_url) {
          if (token.image_original_url) {
            tokenImageUrl = token.image_original_url
          }
          else {
            tokenImageUrl = token.image_url
          }
        }

        //const imageMeta = await this.GetImageMeta(tokenImageUrl)
        
        console.log(this.$refs.cropper)
        
        const content = {
          id: device,
          currentDisplay: {
            tokenName: this.showMetadata ? token.name : "",
            tokenOwnershipUrl: this.showMetadata ? token.permalink : "",
            tokenMetadata: this.showMetadata ? token.description : "",
            tokenImageUrl,
            borderWidthPercent: this.borderWidthPercent,
            rotationFrequency: this.rotationFrequency,
            fitScreen: this.fitScreen,
            backgroundColor: this.selectedBackgroundColor,
            orientationVertical: this.orientationVertical,
            currentPrice: token.current_price,
            cropper: { 
                width: Math.round(this.cropperParams.width),
                height: Math.round(this.cropperParams.height), 
                left: Math.round(this.cropperParams.left),
                top: Math.round(this.cropperParams.top)
            },
            rotateAngle: Math.round(this.$refs.cropper.imageTransforms.rotate)
          }
        }
        
        this.showTokenDisplayOptions = false
        console.log(content)
        
        $.post("Account/SetDeviceContent?address=" + web3Account + "&signature=" + signature + "&network=" + app.network + "&whitelabeler=" + app.whitelabeler,
          content,
          function (result) {
            if (result === false) {
              alert("Cast Failed")
            }
            else {
                alert("Token casted!")
            }
          })
      },
      AddDeviceWithForm () {
        this.showAddDeviceInput = false
        const deviceId = document.getElementById("deviceIdInput").value
//         const deviceAlias = document.getElementById("deviceAliasInput").value
        document.getElementById("deviceIdInput").value = ""
//         document.getElementById("deviceAliasInput").value = ""
        AddDevice(deviceId, deviceId)
      },
      AddDemoDeviceWithForm () {
        this.showAddDeviceInput = false
        const deviceId = words({ exactly: 1, wordsPerString: 3, separator: '_' }) + "_demo"
        document.getElementById("deviceIdInput").value = ""
        document.getElementById("deviceAliasInput").value = ""
        AddDevice(deviceId)
        // Open demo link in new tab
        const demoLink = "https://tokencast.net/device?demoFrame=true&deviceId=" + deviceId
        window.open(demoLink)
      },
      UpdateDeviceWithForm () {
        this.showDeviceEdit = false
        const deviceId = this.selectedDeviceId
//         const alias = document.getElementById("deviceAliasInput").value
//         const frequency = document.getElementById("frequencyOutputValue").value
        UpdateDevice(deviceId, deviceId, frequency)
      },
      GetTokensOnQueue () {
        GetCastedTokensForDevice(this.selectedDeviceId)
      },
      DeleteDeviceWithForm () {
        this.showDeviceEdit = false
        DeleteDevice(this.selectedDeviceId)
      },
      ClearDeviceWithForm () {
        RemoveAllTokens(this.selectedDeviceId)
      },
      RemoveTokenFromDevice (index) {
        RemoveSingleToken(this.selectedDeviceId, index)
      },
      ShareDeviceWithForm () {
        const deviceId = this.selectedDeviceId
        const shareLink = "https://www.tokencast.net/Account?deviceId=" + deviceId

        if (navigator.share) {
          // From mobile device
          navigator.share({
            title: 'TokenCast Device',
            text: 'Display tokens to this device.',
            url: shareLink,
          })
            .then(() => console.log('Successful share'))
            .catch((error) => console.log('Error sharing', error))
        }
        else {
          // From PC
          CopyToClipboard(shareLink)
          alert("Copied sharable link!")
        }
      },
      CloseInputForms () {
        this.showTokenDisplayOptions = false
        this.showAddDeviceInput = false
        this.showDeviceEdit = false
      },
      ColorSelected (color) {
        this.selectedBackgroundColor = color
      },
      ToggleBurger () {
        this.isBurgerActive = !this.isBurgerActive
      },
      TokenPreviewClick (e) {
        const color = grabColorFromPos(e)
        this.eyedropperSelectedColor = color
        this.selectedBackgroundColor = color
      },
      TokenPreviewMousemove (e) {
        this.eyedropperHoverColor = grabColorFromPos(e)
      },
      TokenPreviewMouseout () {
        this.eyedropperHoverColor = this.eyedropperSelectedColor
      },
      GetLogOf (){
        const input = document.getElementById("frequencyOfRotation")
        this.rotationFrequency = Math.pow(2, input.value)
      },
      rotate(angle) {
          this.$refs.cropper.rotate(angle)
      }
    },
    directives: {
      lazyload: {
        inserted (el) {
          function loadImage() {
            const imageElement = Array.from(el.children).find(
              el => el.nodeName === "IMG"
            )
            if (imageElement) {
              imageElement.addEventListener("load", () => {
                setTimeout(() => el.classList.add("loaded"), 100)
              })
              imageElement.addEventListener("error", () => console.log("error"))
              imageElement.src = imageElement.dataset.url
            }
            const loaderElement = Array.from(el.children).find(
              el => el.nodeName === "DIV"
            )

            if (loaderElement) {
              loaderElement.style.display = "none"
            }
          }

          function handleIntersect(entries, observer) {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                loadImage()
                observer.unobserve(el)
              }
            })
          }

          function createObserver() {
            const options = {
              root: null,
              threshold: "0"
            }
            const observer = new IntersectionObserver(handleIntersect, options)
            observer.observe(el)
          }
          if (window["IntersectionObserver"]) {
            createObserver()
          } else {
            loadImage()
          }
        }
      }
    }
  })

  window.onload = function () {
    onLoad(false, true)
  }
</script>